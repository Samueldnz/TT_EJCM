// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  password   String
  avatarUrl  String?     // imagem de perfil
  favorites  Favorite[]  @relation("UserFavorites")
  purchases  Transaction[] @relation("UserPurchases")
  createdAt  DateTime    @default(now())
}

model Product {
  id           String         @id @default(uuid())
  title        String
  description  String
  price        Float
  condition    Condition
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String
  images       ProductImage[]
  favorites    Favorite[]     @relation("ProductFavorites")
  transactionItems TransactionItem[] // N:M com transações
  isAvailable  Boolean        @default(true)
  createdAt    DateTime       @default(now())
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  iconUrl  String?   // imagem para mostrar o ícone
  products Product[]
}

model Favorite {
  id         String   @id @default(uuid())
  user       User     @relation("UserFavorites", fields: [userId], references: [id])
  userId     String
  product    Product  @relation("ProductFavorites", fields: [productId], references: [id])
  productId  String
  createdAt  DateTime @default(now())

  @@unique([userId, productId])
}

model Transaction {
  id          String           @id @default(uuid())
  buyer       User             @relation("UserPurchases", fields: [buyerId], references: [id])
  buyerId     String
  items       TransactionItem[] // N:M
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
}

model TransactionItem {
  id            String     @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  quantity      Int         @default(1)

  @@unique([transactionId, productId])
}

enum Condition {
  NEW
  USED
  REFURBISHED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

